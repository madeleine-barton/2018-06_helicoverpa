#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-index1.ceda.ac.uk - 2018/04/04 05:13:23
# Search URL: http://esgf-index1.ceda.ac.uk/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.MOHC.HadGEM2-CC.historical.mon.atmos.Amon.r3i1p1.v20111208|esgf-data1.ceda.ac.uk
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://esgf-index1.ceda.ac.uk/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.MOHC.HadGEM2-CC.historical.mon.atmos.Amon.r3i1p1.v20111208|esgf-data1.ceda.ac.uk'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'cl_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/cl/cl_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '21f01513549d0065a01515ac47231271cd439c532661cfeb87358404adb675db'
'cl_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/cl/cl_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'b869cb0327470d87f7c3fcebe8ab8fbfe6f993ef18f4a7cea7f4198e6393bedb'
'cli_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/cli/cli_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '7389f149b5b8456307eb5c72b6a5e4e9ab12598110c11fe16cf5cb6a7680fc56'
'cli_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/cli/cli_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '187a2ed12854e1b7a03b273ea25ec9b6d9f769fe358e62c4d589e941e08fc8d7'
'clivi_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/clivi/clivi_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '137c4b5b37bc12f182c4aa540ecf534ab125a05500d38ae40a294cff379ef1b7'
'clivi_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/clivi/clivi_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '00402ca724f87dc1eadb93ed3f71baae4a1de42d203ddbd45d6192df09ed844a'
'clt_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/clt/clt_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '04dd0035eccf57696d2320ea5ace26e40583a37b526dbe070105b699b4dd9210'
'clt_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/clt/clt_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '95ea29ab5c954621874274ec908e3ca98378fb4c1441d62f5e87a529c0d6b1af'
'clw_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/clw/clw_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'd5663e815b2a64176399cd1e5997a85765e76d71c402c5d4c2c4ada127a83b01'
'clw_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/clw/clw_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'f4bd6b5d663efacdb6b0a8e6b14945a5fcb569fb5b5acd3394dc646356f7db2a'
'clwvi_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/clwvi/clwvi_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'd95ae610b91845b2cce17bb39303fa161fa5ff3b4e935823d9a33deb8fc1ca5c'
'clwvi_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/clwvi/clwvi_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'bf5c258924364d5ac11c46a475178bd761ff9f6df98d06b33b764cea5918d6c7'
'evspsbl_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/evspsbl/evspsbl_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '4ab3897c4fae495428e47fc0eb7e8d03eb4e16518fdd96135557e024b8f1215b'
'evspsbl_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/evspsbl/evspsbl_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'f022746744c3687fce116de7fd58d906ccb6d502c11f1ed725305cef4e76727a'
'hfls_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/hfls/hfls_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '94c90f09851984c904c90860bd4bbcd786fd43e5284130ae25d67ef294aab056'
'hfls_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/hfls/hfls_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '5f425ebd7f60a018ea700a30811989f92ace55b50b754cb03f80684c9a56ff2a'
'hfss_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/hfss/hfss_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'e8df55d3f4b9512613fe8701439be7a6e8ce558436a10bb37f0481034e0067bf'
'hfss_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/hfss/hfss_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '532849d298b21079df1ea3fc923efaf52389e632f64a58b63e2356b6d503a6de'
'hur_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/hur/hur_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'a4d5e2143ab3daad169eb0937f01f82f0927870522f31d3ea5906bf7c005cd95'
'hur_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/hur/hur_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'fe562d2d7b10bce2731d041892cd6a2d4393de124c07170e39dafd360fa7db4f'
'hurs_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/hurs/hurs_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '4dbc6c6d4843c86550841f16b233a56988997ea7edf9205881ca5046fa364ce4'
'hurs_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/hurs/hurs_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '989af08d9437d10d3b1f4e997592b9c1d23de16c21a2be89884ff457bdab6fd0'
'hus_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/hus/hus_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '80bf528ba32ca9bbf25bc528b6a386e6a630811a121a064c9350b68eaefaed82'
'hus_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/hus/hus_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'fae683949105ecbf8cbda75db43b3839b89377310daa198a498e8f940cb9057c'
'huss_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/huss/huss_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'f632c01cd7a79e678653ea2a27977f2838d097b9264f185f344307fcae0bb3b7'
'huss_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/huss/huss_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '340c509e754733deba7dce8e677a22add0a5d69f998acc5f92aec57a07c8efea'
'mc_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/mc/mc_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '002b66a7331c64541532a1d2afd6be7890efe8385d328f9d56a7e0fa0d4eefd8'
'mc_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/mc/mc_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '5b73c9fab7758019f6ec1d8277bba754030e68256468cc86405cc853f3bae8c8'
'pr_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/pr/pr_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'fde56356513261e9dfc393b6e25e602e3b94c6fdae41e8e007429c5ee4172bf1'
'pr_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/pr/pr_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '408fde44e967741cefe56fd59e7831ed4102f57fb5ae91d05c7cca42a5335858'
'prc_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/prc/prc_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '312fbd88349e1b2dfb8c0d4d23a07a625ed57376c34875d0cbd9bb2406c59306'
'prc_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/prc/prc_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'db96a65a7d4e3965500a29f6ad1460e189909c94c3b6fa0ba4bb274f6c800016'
'prsn_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/prsn/prsn_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '62635389ea1d3496c5cffa025eebde6f60cd3de23a58810207d9f1cf1826fccc'
'prsn_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/prsn/prsn_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '82de4fc27d5db55b10540fedbeeb0c1a8b103558777e7b74c359e811953a8a3e'
'prw_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/prw/prw_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '332c052745af8a80d54d3f65f68c321dbe8a3d70527238baf5d03982a62b4952'
'prw_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/prw/prw_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '1e1dced6635c3e2c206ca7a821cbe4d5e8f619d82962d6317707e523d32bbf3d'
'ps_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/ps/ps_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '0c0261c85ed97724af47a8e116c4062263540d71180e5d8d03a7036e3b65466d'
'ps_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/ps/ps_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '885222396ce9dffc838e7ccbd3ab7c2b77b43a91a73a10755177e592eabbe552'
'psl_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/psl/psl_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'b2f155d89c7e3b1041577bdab12a3785fe666ee764ba83aa9fb6031583f23b49'
'psl_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/psl/psl_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'a1e29c795c5f47b4e8dee037851093ad71257ff9aa1b45a0257876252ab0b8e2'
'rlds_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rlds/rlds_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'cbe563c37b666991cb40db0ec4395eff8246be65104d9f982eec268911aa4aac'
'rlds_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rlds/rlds_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'b5b033a346fa3a23b8930277a80e76e8d0842a04f530446bce8fe7e62a077a99'
'rldscs_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rldscs/rldscs_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '1a803e1a867fb6eea05e368a213992e3fe2540d0e2099cbcba047758a6eb977a'
'rldscs_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rldscs/rldscs_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'b6fc0750e2911d814fc94a8b8e244af247244394ac52c473e81cfe459136d5bb'
'rlus_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rlus/rlus_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'edf2b607c6d356af8b05c19b020b103f76675a13ab24407da7a424664272c53b'
'rlus_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rlus/rlus_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '32b010f73798f75b8d50e82bb64d5431e479dd6a20e1421735a53ae7c2d2e20e'
'rlut_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rlut/rlut_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'cc649bf541c9c5fd5ec47bf573d37bd032bb12ee3eaa891fa8c350a0320addcf'
'rlut_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rlut/rlut_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'fc7bc5f0128d8c71d0520907cae12f06087a5c705ab3a9a9ac8d21d20bdc710b'
'rlutcs_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rlutcs/rlutcs_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '4c2958bbc5cb86dd41d24b51b829f9122b1bc6cef17260db353c4cf257d913ab'
'rlutcs_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rlutcs/rlutcs_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '8ee0f4d23947b5f21ff32aa79c9efdad101b3dd6b9a2dd55a766abc3fa9528d3'
'rsds_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsds/rsds_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '604c775c4f76e9b0fad1289675c52c633201cf79782175d0b609769d5128e0ea'
'rsds_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsds/rsds_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'a487ee3fb03557d7fe1798b57957d71200bdc8caa90d9902a18b627531f7fd22'
'rsdscs_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsdscs/rsdscs_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'c239d43e7cd06a0a6dedfb74a2a604fa056b7b4b4ea4957797ae4605d01555de'
'rsdscs_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsdscs/rsdscs_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'c10cd86beafaf94d1ca8bf2a971e78f214a6d3cfd626a1f5adcedcc96fb31776'
'rsdt_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsdt/rsdt_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '6c6cc107dd3047cb3af6a66505c3c915ba2078ec75e7a4fd40a5a1c6b1f2c9f0'
'rsdt_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsdt/rsdt_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'fb26e4595941f42f18a7975454d9927f8db3e47b42207769f9403d781d172a9c'
'rsus_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsus/rsus_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '5fa657c44ba2e42e64d28d93a45c1e4ebcf93a107becfdf7315fce34fe75d8c1'
'rsus_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsus/rsus_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '195cf10510a176e880a3c487aa6b15ae306b243069d2bc28c768deb81d83732a'
'rsuscs_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsuscs/rsuscs_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '91a2a42c01869ca3d1c848e742b309a804dc3875f1916b4659674e32f66cd7b0'
'rsuscs_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsuscs/rsuscs_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '8aea42950f03c6dad1d731078ede145168cf11c55cbe5c6b32ec51e055187205'
'rsut_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsut/rsut_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '8d99ea6a95da5178c6de25e1a984a2ecbdb63c01337eef3e865d371b982f849c'
'rsut_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsut/rsut_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'aabcd4c8459fe1d3c664b3a67b9899d4841ce5d250a553487a545fe1ca31f8e8'
'rsutcs_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsutcs/rsutcs_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'b4dd09e59e5fa0166b1bd8c31a2ed6b818668c014130d8b4631934fa62fefaa6'
'rsutcs_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/rsutcs/rsutcs_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'e53c181ee7e33441e8c403fc734f189fa202c15d321bc82e90d04ad50ecad328'
'sbl_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/sbl/sbl_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '4d3f7e08c6a1570b2fd7a4600fdd4006754ecff05bbf6f1a6f88761665a2700d'
'sbl_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/sbl/sbl_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'c50f69b8c402ebe94f68d228db616387893befc66ca49c36a44380eb1fd99725'
'sci_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/sci/sci_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '58afc796a2e5ed0c81c7bfc69dabe4517b48d71b1f2d139b4c909834efec944e'
'sci_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/sci/sci_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '6d839443ac0bb7c49a7003554122a3685474ea5323912c9069a3e31f6fc204fb'
'sfcWind_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/sfcWind/sfcWind_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'cfccb08a0a69f6891336a5dd0a73b63242c1fde7d9de12b18caf1f5915fb62e7'
'sfcWind_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/sfcWind/sfcWind_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '41e8da623df9b02aff80a6cfbe482f08d7d70df3bafc8564723503b614858e3f'
'ta_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/ta/ta_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '78c9a4f391e4a1cd6aaae8998cce698f69186711c92310a975a545552066bee0'
'ta_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/ta/ta_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '3e457ea310366a909d8781ed7716fca65e3fd9d53b6ece99f3f27e6d5eeed5d8'
'tas_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/tas/tas_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '33218fd08524ef5bda12ab9264828865d6e00f7ba3778cc2cb6cdbfa77dc8cf7'
'tas_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/tas/tas_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'bb335d2cdc95ec5ba7ec3d0d34c1bc9f4035ba582ca442210eac9f07437d143f'
'tasmax_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/tasmax/tasmax_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '9542a5207214657ed8a96b3cc7bf1c4d2de196d01b47a4606fa085977dd755d6'
'tasmax_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/tasmax/tasmax_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '53b3c25f67d74a7f35d99cb29919249964d9ca0f434ba2cf49b1bebf98ef78fb'
'tasmin_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/tasmin/tasmin_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'b115c826d624dc2e1c8a592f8ea249c1bf4074007a17f001933c3a2a15138ace'
'tasmin_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/tasmin/tasmin_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '8b9fbd2af4d3e9fdbb6d84e2ab3d35fcfd2cdb84a4502293f0045f37a465c901'
'tauu_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/tauu/tauu_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'd5c1c21e5a9f06342d60b1d62eae29874d5fa31e1607d56704ef1ad7572e565a'
'tauu_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/tauu/tauu_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'ab2f6b66a400fcc85995aded2a359447726db1b64e7d176ff03056bfe143173c'
'tauv_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/tauv/tauv_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' 'ba31eb989cf750a4a337e05d35b96af8ff30b63d76a427ebe6f5270b6fedde52'
'tauv_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/tauv/tauv_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'cd38144f60d423dc8c7d8166b0315d48d836857658385b12c31eb146071bdf40'
'ts_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/ts/ts_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '5f2a6c59e2a9b7b4b2df700a05803e974ab0bcf14b416dd66aa523b3aca923ba'
'ts_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/ts/ts_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'ddda5f0dd7a460060de485f27fbd50f6bf9ceb18b4312a31b818647bc373551b'
'ua_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/ua/ua_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '244913b266d2652359bd33b81cf4f0f2106b30c2be6b62cf828d81d92dfa2e44'
'ua_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/ua/ua_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '718d10415970d77e4062131547cef7692019e974e9054c9604548d1a6c740761'
'uas_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/uas/uas_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '03e070825379eb58a5da16dc92ab1fccc6ad71df9d431dc19fa8053797544e02'
'uas_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/uas/uas_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'c7572c4189e3ea389cb05686f8c8494f3e1f5ddb683d3e84698d01fa1c11556d'
'va_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/va/va_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '3024b7134d44812f53bf4a2a4fad4b4a100449d0c0e86dcf0772040e228e08a2'
'va_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/va/va_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '937dd228625b545e0e8dc97d28dae5caa925bf8ff639c6714ff69a5534ebcdec'
'vas_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/vas/vas_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '524eddb818ab8d9c0e07b763d671523a0481c7010b3f21315248edb58dba32b0'
'vas_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/vas/vas_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' '4637300a341ac9110e251148c7c3aff44bb8d7b607538d16461455aeb31a254c'
'zg_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/zg/zg_Amon_HadGEM2-CC_historical_r3i1p1_195912-198411.nc' 'SHA256' '6cbaa8dcd2d714577b0a6771400d90cb8b685e28d3b7746882d3126c1c267dfd'
'zg_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-CC/historical/mon/atmos/Amon/r3i1p1/v20111208/zg/zg_Amon_HadGEM2-CC_historical_r3i1p1_198412-200512.nc' 'SHA256' 'c8d4b045a6ceddeced5c842341fa97aaf78e21bc7636dae6904dfe1f5d4b6759'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if ((mVer<5)); then
        echo "Java version 1.5+ is required for retrieving the certificate." >&2
        echo "Current version seems older: $(java -version | head -n1) " >&2  
        return 1
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 94 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
